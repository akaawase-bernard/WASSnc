import wavespec
from netCDF4 import Dataset
import numpy as np
from os import path
import matplotlib.pyplot as plt
import multiprocessing
from tqdm import tqdm


pth = '/d1/lab/data/bernard/wass/'
project = 'AA_2015/'
exp = '2015-03-05_10-35-00_12Hz/'
task = 'gridding/'
file = 'surfaces_20150305_gridded.nc'

workdir = pth + project  + exp + 'output/'
planedir = pth + project  + exp + 'data/'
filename = pth + project + exp + task + file


VERSION = 1.0
baseline = 2.5
fps = 12
num=3
fillvalue = 99
num_processors = 20
Nx= 400
Ny = Nx
first_frame = 0
last_frame = 21571 #change this number to match your dataset images number
distance=80 
xcentre=0
ycentre=-45


planefile=path.join(planedir,  "plane.txt" )
if path.exists( planefile ):
    mean_plane = np.loadtxt( planefile )
    assert len(mean_plane )==4, "Plane must be a 4-element vector"

wass_frames = list()
for element in range(first_frame,last_frame,1):
    wass_framepth = workdir + str(element).zfill(6) + '_wd' #create 6 zeros and append frame number
    wass_frames.append(wass_framepth)


def process_frame(num):
    XX, YY, Zdata = wavespec.grid_interpolate_wassXYZ(wass_frames[num], num, mean_plane,
                           baseline, distance, xcentre, ycentre, Nx, checks=0)
    maskZ = (np.abs(Zdata) <= fillvalue).astype(int)  # amplitudes less than +/-99m
    return Zdata, maskZ


if __name__ == '__main__':
    with Dataset(filename, 'w') as ds:  # Create the NetCDF file
        ds.createDimension('frame', len(wass_frames))  # Create the dimensions
        ds.createDimension('X', Nx)
        ds.createDimension('Y', Ny)
        ds.createDimension('count', len(wass_frames))

        Z = ds.createVariable("Z", "f4", ("count", "X", "Y"))  # Create the variables
        Z.units = "meter"
        Z.long_name = "Z data in time over the XY grid"
        Z.field = "Z, scalar, series"

        xgrid = ds.createVariable("X_grid", "f8", ("X", "Y"))
        xgrid.units = "meter"
        xgrid.long_name = "X axis grid"
        xgrid.field = "X_grid, scalar, series"

        ygrid = ds.createVariable("Y_grid", "f8", ("X", "Y"))
        ygrid.units = "meter"
        ygrid.long_name = "Y axis grid"
        ygrid.field = "Y_grid, scalar, series"

        maskZ = ds.createVariable("maskZ", "f4", ("count", "X", "Y"))
        maskZ.units = ""
        maskZ.long_name = "Z mask over the XY grid"
        maskZ.field = "Z, scalar, series"

        count = ds.createVariable('count', 'i', ('count',))
        scale = ds.createVariable("scale", "f8")
        scale.long_name = "scale"
        scale.units = "meter"

        # Set additional attributes
        ds.setncattr("info", "Generated by UCONN AirSea Lab v.%s" % VERSION)
        ds.setncattr("baseline", baseline)
        ds.setncattr("fps", fps)

        # Create a pool of workers
        pool = multiprocessing.Pool(processes=num_processors)

        # Map the frames to worker processes
        results = list(tqdm(pool.imap(process_frame, range(len(wass_frames))), total=len(wass_frames), desc="Processed frames"))

        
        for num, (Zdata, mask) in enumerate(results): # Save the variables
            Z[num, :, :] = Zdata
            maskZ[num, :, :] = mask

        count[:] = range(len(wass_frames)) # Set the values for count and scale variables
        scale[:] = baseline

        pool.close()
        pool.join()
        print("NetCDF file created and data written.")
